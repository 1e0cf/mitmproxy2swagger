name: Release package
on:
  workflow_dispatch:
    inputs:
      release-type:
        type: choice
        description: 'Release type (one of): patch, minor, major, prepatch, preminor, premajor, prerelease'
        default: 'patch'
        options:
          - 'patch'
          - 'minor'
          - 'major'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # Checkout project repository
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Install dependencies
        run: |
          uv sync --all-groups
      - name: Run Python lint checks
        run: |
          uv run pre-commit run --all-files
      - name: Run Python tests
        run: |
          uv run pytest --cov
      - name: Git configuration
        run: |
          git config --global user.email "bot@example.com"
          git config --global user.name "GitHub Actions"
      - name: Bump release version
        run: |
          python3 << 'EOF'
          import re
          import sys

          release_type = "${{ github.event.inputs.release-type }}"

          with open("pyproject.toml", "r") as f:
              content = f.read()

          version_match = re.search(r'^version = "(\d+)\.(\d+)\.(\d+)"', content, re.MULTILINE)
          if not version_match:
              sys.exit(1)

          major, minor, patch = map(int, version_match.groups())

          if release_type == "major":
              major += 1
              minor = 0
              patch = 0
          elif release_type == "minor":
              minor += 1
              patch = 0
          elif release_type == "patch":
              patch += 1

          new_version = f"{major}.{minor}.{patch}"
          new_content = re.sub(
              r'^version = "\d+\.\d+\.\d+"',
              f'version = "{new_version}"',
              content,
              count=1,
              flags=re.MULTILINE
          )

          with open("pyproject.toml", "w") as f:
              f.write(new_content)

          print(f"NEW_VERSION={new_version}")
          with open("$GITHUB_ENV", "a") as env_file:
              env_file.write(f"NEW_VERSION={new_version}\n")
          EOF
      - name: Build package
        run: |
          uv lock
          uv build
      - name: Commit pyproject.toml and uv.lock
        run: |
          git add pyproject.toml uv.lock
          git commit -m "chore: release ${{ env.NEW_VERSION }}"
          git tag ${{ env.NEW_VERSION }}
          git push origin master
      - name: Build docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: false
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      # Push repository changes
      - name: Publish package
        run: |
          uv publish
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
      - name: Push docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: false
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
